using ModelEF.Model;using System;using System.Collections.Generic;using System.Linq;using PagedList;namespace ModelEF.DAO{    public class CustomerDao    {        private DuongXuanDuongContext db;        public CustomerDao()        {            db = new DuongXuanDuongContext();        }        public List<tbl_customer> ListAll()        {            return db.tbl_customer.ToList();        }        public List<tbl_customer> ListWhereAll(string keySearch)        {            if (!string.IsNullOrEmpty(keySearch))                return db.tbl_customer.Where(x => x.customer_name.Contains(keySearch)).ToList();            return db.tbl_customer.ToList();        }        public bool Find(string username)        {            return db.tbl_customer.Any(x => x.customer_name == username);        }        public bool FindName(string customername)        {            return db.tbl_customer.Any(x => x.customer_name == customername);        }        public string Insert(tbl_customer entityCustomer)        {            //var user = FindId(entityUser.admin_id);            db.tbl_customer.Add(entityCustomer);            db.SaveChanges();            return entityCustomer.customer_name;        }        public tbl_customer FindId(System.Int32 customer_id)        {            return db.tbl_customer.Find(customer_id);        }        public bool Delete(System.Int32 customer_id)        {            try            {                var customer = db.tbl_customer.Find(customer_id);                db.tbl_customer.Remove(customer);                db.SaveChanges();                return true;            }            catch (Exception ex)            {                return false;            }        }		public IEnumerable<tbl_customer> ListAllPaging(int page, int pageSize,string search)        {            if (!string.IsNullOrEmpty(search))            {                return db.tbl_customer.Where(x => x.customer_name.Contains(search)).OrderByDescending(x => x.customer_id).ToPagedList(page, pageSize);            }            return db.tbl_customer.OrderByDescending(x => x.customer_id).ToPagedList(page, pageSize);        }    }}